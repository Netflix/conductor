// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/taskdef.proto

package model // import "github.com/netflix/conductor/client/gogrpc/conductor/model"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskDef_RetryLogic int32

const (
	TaskDef_FIXED               TaskDef_RetryLogic = 0
	TaskDef_EXPONENTIAL_BACKOFF TaskDef_RetryLogic = 1
)

var TaskDef_RetryLogic_name = map[int32]string{
	0: "FIXED",
	1: "EXPONENTIAL_BACKOFF",
}
var TaskDef_RetryLogic_value = map[string]int32{
	"FIXED":               0,
	"EXPONENTIAL_BACKOFF": 1,
}

func (x TaskDef_RetryLogic) String() string {
	return proto.EnumName(TaskDef_RetryLogic_name, int32(x))
}
func (TaskDef_RetryLogic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_taskdef_dbc1866a3715b3e8, []int{0, 0}
}

type TaskDef_TimeoutPolicy int32

const (
	TaskDef_RETRY       TaskDef_TimeoutPolicy = 0
	TaskDef_TIME_OUT_WF TaskDef_TimeoutPolicy = 1
	TaskDef_ALERT_ONLY  TaskDef_TimeoutPolicy = 2
)

var TaskDef_TimeoutPolicy_name = map[int32]string{
	0: "RETRY",
	1: "TIME_OUT_WF",
	2: "ALERT_ONLY",
}
var TaskDef_TimeoutPolicy_value = map[string]int32{
	"RETRY":       0,
	"TIME_OUT_WF": 1,
	"ALERT_ONLY":  2,
}

func (x TaskDef_TimeoutPolicy) String() string {
	return proto.EnumName(TaskDef_TimeoutPolicy_name, int32(x))
}
func (TaskDef_TimeoutPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_taskdef_dbc1866a3715b3e8, []int{0, 1}
}

type TaskDef struct {
	Name                   string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	RetryCount             int32                     `protobuf:"varint,3,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	TimeoutSeconds         int64                     `protobuf:"varint,4,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	InputKeys              []string                  `protobuf:"bytes,5,rep,name=input_keys,json=inputKeys,proto3" json:"input_keys,omitempty"`
	OutputKeys             []string                  `protobuf:"bytes,6,rep,name=output_keys,json=outputKeys,proto3" json:"output_keys,omitempty"`
	TimeoutPolicy          TaskDef_TimeoutPolicy     `protobuf:"varint,7,opt,name=timeout_policy,json=timeoutPolicy,proto3,enum=conductor.proto.TaskDef_TimeoutPolicy" json:"timeout_policy,omitempty"`
	RetryLogic             TaskDef_RetryLogic        `protobuf:"varint,8,opt,name=retry_logic,json=retryLogic,proto3,enum=conductor.proto.TaskDef_RetryLogic" json:"retry_logic,omitempty"`
	RetryDelaySeconds      int32                     `protobuf:"varint,9,opt,name=retry_delay_seconds,json=retryDelaySeconds,proto3" json:"retry_delay_seconds,omitempty"`
	ResponseTimeoutSeconds int32                     `protobuf:"varint,10,opt,name=response_timeout_seconds,json=responseTimeoutSeconds,proto3" json:"response_timeout_seconds,omitempty"`
	ConcurrentExecLimit    int32                     `protobuf:"varint,11,opt,name=concurrent_exec_limit,json=concurrentExecLimit,proto3" json:"concurrent_exec_limit,omitempty"`
	InputTemplate          map[string]*_struct.Value `protobuf:"bytes,12,rep,name=input_template,json=inputTemplate,proto3" json:"input_template,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RateLimitPerSecond     int32                     `protobuf:"varint,13,opt,name=rate_limit_per_second,json=rateLimitPerSecond,proto3" json:"rate_limit_per_second,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                  `json:"-"`
	XXX_unrecognized       []byte                    `json:"-"`
	XXX_sizecache          int32                     `json:"-"`
}

func (m *TaskDef) Reset()         { *m = TaskDef{} }
func (m *TaskDef) String() string { return proto.CompactTextString(m) }
func (*TaskDef) ProtoMessage()    {}
func (*TaskDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_taskdef_dbc1866a3715b3e8, []int{0}
}
func (m *TaskDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskDef.Unmarshal(m, b)
}
func (m *TaskDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskDef.Marshal(b, m, deterministic)
}
func (dst *TaskDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDef.Merge(dst, src)
}
func (m *TaskDef) XXX_Size() int {
	return xxx_messageInfo_TaskDef.Size(m)
}
func (m *TaskDef) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDef.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDef proto.InternalMessageInfo

func (m *TaskDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaskDef) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *TaskDef) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *TaskDef) GetInputKeys() []string {
	if m != nil {
		return m.InputKeys
	}
	return nil
}

func (m *TaskDef) GetOutputKeys() []string {
	if m != nil {
		return m.OutputKeys
	}
	return nil
}

func (m *TaskDef) GetTimeoutPolicy() TaskDef_TimeoutPolicy {
	if m != nil {
		return m.TimeoutPolicy
	}
	return TaskDef_RETRY
}

func (m *TaskDef) GetRetryLogic() TaskDef_RetryLogic {
	if m != nil {
		return m.RetryLogic
	}
	return TaskDef_FIXED
}

func (m *TaskDef) GetRetryDelaySeconds() int32 {
	if m != nil {
		return m.RetryDelaySeconds
	}
	return 0
}

func (m *TaskDef) GetResponseTimeoutSeconds() int32 {
	if m != nil {
		return m.ResponseTimeoutSeconds
	}
	return 0
}

func (m *TaskDef) GetConcurrentExecLimit() int32 {
	if m != nil {
		return m.ConcurrentExecLimit
	}
	return 0
}

func (m *TaskDef) GetInputTemplate() map[string]*_struct.Value {
	if m != nil {
		return m.InputTemplate
	}
	return nil
}

func (m *TaskDef) GetRateLimitPerSecond() int32 {
	if m != nil {
		return m.RateLimitPerSecond
	}
	return 0
}

func init() {
	proto.RegisterType((*TaskDef)(nil), "conductor.proto.TaskDef")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "conductor.proto.TaskDef.InputTemplateEntry")
	proto.RegisterEnum("conductor.proto.TaskDef_RetryLogic", TaskDef_RetryLogic_name, TaskDef_RetryLogic_value)
	proto.RegisterEnum("conductor.proto.TaskDef_TimeoutPolicy", TaskDef_TimeoutPolicy_name, TaskDef_TimeoutPolicy_value)
}

func init() { proto.RegisterFile("model/taskdef.proto", fileDescriptor_taskdef_dbc1866a3715b3e8) }

var fileDescriptor_taskdef_dbc1866a3715b3e8 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x51, 0x6f, 0xd3, 0x4c,
	0x10, 0xac, 0x9b, 0xa6, 0xfd, 0xb2, 0xf9, 0x92, 0x86, 0x8b, 0x5a, 0xac, 0x02, 0xc2, 0x2a, 0x12,
	0x44, 0x02, 0xd9, 0x10, 0x5e, 0xaa, 0xf2, 0xd4, 0x36, 0x8e, 0x14, 0x35, 0x6d, 0x22, 0x63, 0xa0,
	0xe5, 0xc5, 0x72, 0x2e, 0x1b, 0x63, 0xc5, 0xf6, 0x59, 0xe7, 0x33, 0xaa, 0xff, 0x23, 0x3f, 0x0a,
	0xdd, 0xd9, 0x69, 0xd3, 0xa0, 0xbe, 0xdd, 0xcd, 0xcc, 0xcd, 0xee, 0x8e, 0xd7, 0xd0, 0x8d, 0xd9,
	0x1c, 0x23, 0x4b, 0xf8, 0xd9, 0x72, 0x8e, 0x0b, 0x33, 0xe5, 0x4c, 0x30, 0xb2, 0x4f, 0x59, 0x32,
	0xcf, 0xa9, 0x60, 0xbc, 0x04, 0x8e, 0x5e, 0x06, 0x8c, 0x05, 0x11, 0x5a, 0xea, 0x36, 0xcb, 0x17,
	0x56, 0x26, 0x78, 0x4e, 0x45, 0xc9, 0x1e, 0xff, 0xd9, 0x85, 0x3d, 0xd7, 0xcf, 0x96, 0x03, 0x5c,
	0x10, 0x02, 0x3b, 0x89, 0x1f, 0xa3, 0xae, 0x19, 0x5a, 0xaf, 0xe1, 0xa8, 0x33, 0x31, 0xa0, 0x39,
	0xc7, 0x8c, 0xf2, 0x30, 0x15, 0x21, 0x4b, 0xf4, 0x6d, 0x45, 0xad, 0x43, 0xe4, 0x35, 0x34, 0x39,
	0x0a, 0x5e, 0x78, 0x94, 0xe5, 0x89, 0xd0, 0x6b, 0x86, 0xd6, 0xab, 0x3b, 0xa0, 0xa0, 0x0b, 0x89,
	0x90, 0x77, 0xb0, 0x2f, 0xc2, 0x18, 0x59, 0x2e, 0xbc, 0x0c, 0x65, 0x77, 0x99, 0xbe, 0x63, 0x68,
	0xbd, 0x9a, 0xd3, 0xae, 0xe0, 0xaf, 0x25, 0x4a, 0x5e, 0x01, 0x84, 0x49, 0x9a, 0x0b, 0x6f, 0x89,
	0x45, 0xa6, 0xd7, 0x8d, 0x5a, 0xaf, 0xe1, 0x34, 0x14, 0x72, 0x89, 0x45, 0x26, 0x0b, 0xb1, 0x5c,
	0xdc, 0xf3, 0xbb, 0x8a, 0x87, 0x12, 0x52, 0x82, 0x2b, 0x58, 0x39, 0x7a, 0x29, 0x8b, 0x42, 0x5a,
	0xe8, 0x7b, 0x86, 0xd6, 0x6b, 0xf7, 0xdf, 0x9a, 0x1b, 0x99, 0x98, 0xd5, 0xc4, 0xa6, 0x5b, 0xca,
	0xa7, 0x4a, 0xed, 0xb4, 0xc4, 0xfa, 0x95, 0x0c, 0x56, 0x83, 0x45, 0x2c, 0x08, 0xa9, 0xfe, 0x9f,
	0xf2, 0x7a, 0xf3, 0xa4, 0x97, 0x23, 0xb5, 0x63, 0x29, 0xad, 0xa6, 0x57, 0x67, 0x62, 0x42, 0xb7,
	0x74, 0x99, 0x63, 0xe4, 0x17, 0xf7, 0x09, 0x34, 0x54, 0x4c, 0xcf, 0x14, 0x35, 0x90, 0xcc, 0x2a,
	0x84, 0x13, 0xd0, 0x39, 0x66, 0x29, 0x4b, 0x32, 0xf4, 0x36, 0x63, 0x03, 0xf5, 0xe8, 0x70, 0xc5,
	0xbb, 0x8f, 0xe3, 0xeb, 0xc3, 0x01, 0x65, 0x09, 0xcd, 0x39, 0xc7, 0x44, 0x78, 0x78, 0x87, 0xd4,
	0x8b, 0xc2, 0x38, 0x14, 0x7a, 0x53, 0x3d, 0xeb, 0x3e, 0x90, 0xf6, 0x1d, 0xd2, 0xb1, 0xa4, 0x88,
	0x03, 0xed, 0x32, 0x72, 0x81, 0x71, 0x1a, 0xf9, 0x02, 0xf5, 0xff, 0x8d, 0x5a, 0xaf, 0xd9, 0x7f,
	0xff, 0xe4, 0x98, 0x23, 0x29, 0x77, 0x2b, 0xb5, 0x9d, 0x08, 0x5e, 0x38, 0xad, 0x70, 0x1d, 0x23,
	0x9f, 0xe0, 0x80, 0xfb, 0x02, 0xcb, 0xe2, 0x5e, 0x8a, 0xbc, 0xea, 0x5f, 0x6f, 0xa9, 0x3e, 0x88,
	0x24, 0x55, 0xf5, 0x29, 0xf2, 0xb2, 0xf7, 0xa3, 0x1b, 0x20, 0xff, 0xfa, 0x92, 0x0e, 0xd4, 0x96,
	0x58, 0x54, 0xeb, 0x28, 0x8f, 0xe4, 0x03, 0xd4, 0x7f, 0xfb, 0x51, 0x8e, 0x6a, 0x0f, 0x9b, 0xfd,
	0x43, 0xb3, 0xdc, 0x6d, 0x73, 0xb5, 0xdb, 0xe6, 0x77, 0xc9, 0x3a, 0xa5, 0xe8, 0x74, 0xfb, 0x44,
	0x3b, 0xfe, 0x08, 0xf0, 0xf0, 0x61, 0x48, 0x03, 0xea, 0xc3, 0xd1, 0x8d, 0x3d, 0xe8, 0x6c, 0x91,
	0xe7, 0xd0, 0xb5, 0x6f, 0xa6, 0x93, 0x6b, 0xfb, 0xda, 0x1d, 0x9d, 0x8d, 0xbd, 0xf3, 0xb3, 0x8b,
	0xcb, 0xc9, 0x70, 0xd8, 0xd1, 0x8e, 0xbf, 0x40, 0xeb, 0xd1, 0x5a, 0xc8, 0x47, 0x8e, 0xed, 0x3a,
	0xb7, 0x9d, 0x2d, 0xb2, 0x0f, 0x4d, 0x77, 0x74, 0x65, 0x7b, 0x93, 0x6f, 0xae, 0xf7, 0x63, 0xd8,
	0xd1, 0x48, 0x1b, 0xe0, 0x6c, 0x6c, 0x3b, 0xae, 0x37, 0xb9, 0x1e, 0xdf, 0x76, 0xb6, 0xcf, 0xe7,
	0xf0, 0x82, 0xb2, 0xd8, 0x4c, 0x50, 0x2c, 0xa2, 0xf0, 0x6e, 0x33, 0xc4, 0xf3, 0x46, 0x95, 0xe2,
	0x74, 0xf6, 0xf3, 0x34, 0x08, 0xc5, 0xaf, 0x7c, 0x66, 0x52, 0x16, 0x5b, 0x95, 0xdc, 0xba, 0x97,
	0x5b, 0x34, 0x0a, 0x31, 0x11, 0x56, 0xc0, 0x02, 0x9e, 0xd2, 0x35, 0x5c, 0xfd, 0xf1, 0xb3, 0x5d,
	0xe5, 0xf6, 0xf9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xd8, 0x2b, 0x35, 0x01, 0x04, 0x00,
	0x00,
}
