buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${revDockerCompose}"
    }
}

apply plugin: 'docker-compose'
apply plugin: 'groovy'

configurations.all {
    resolutionStrategy {
        force "com.fasterxml.jackson.core:jackson-core:${revJacksonCore}"
        force "com.fasterxml.jackson.core:jackson-databind:${revJacksonDatabind}"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${revJaxrsJackson}"
    }
}
dependencies {

    testCompile project(':conductor-core')
    testCompile project(':conductor-jersey')
    testCompile project(':conductor-redis-persistence').sourceSets.test.output
    testCompile project(':conductor-mysql-persistence').sourceSets.test.output
    testCompile project(':conductor-postgres-persistence').sourceSets.test.output
    testCompile project(':conductor-client')
    testCompile project(':conductor-server')
    testCompile project(':conductor-grpc-client')
    testCompile project(':conductor-grpc-server')
    testCompile "org.elasticsearch:elasticsearch:${revElasticSearch5}"
    testCompile "org.eclipse.jetty:jetty-server:${revJetteyServer}"
    testCompile "org.eclipse.jetty:jetty-servlet:${revJettyServlet}"
    testCompile "org.rarefiedredis.redis:redis-java:${revRarefiedRedis}"
    testCompile "com.sun.jersey.contribs:jersey-guice:${revJerseyGuice}"

    testCompile "com.google.inject.extensions:guice-servlet:${revGuiceServlet}"
    testCompile "io.swagger:swagger-jersey-jaxrs:${revSwaggerJersey}"
    testCompile "org.awaitility:awaitility:${revAwaitility}"

    testCompile "org.codehaus.groovy:groovy-all:${revGroovy}"
    testCompile "org.spockframework:spock-core:${revSpock}"
    testCompile "org.spockframework:spock-guice:${revSpock}"
    testCompile 'com.netflix.governator:governator-test-spock:latest.release'
    testCompile "org.elasticsearch:elasticsearch:${revElasticSearch5}"
    testCompile "org.elasticsearch.client:transport:${revElasticSearch5}"
    testCompile "org.elasticsearch.client:elasticsearch-rest-client:${revElasticSearch5}"
    testCompile "org.elasticsearch.client:elasticsearch-rest-high-level-client:${revElasticSearch5}"
}

dockerCompose{
    integrationTestDocker{
        useComposeFiles = ["./docker-compose.yml"]
        startedServices = ["mysqldb", "postgresdb"]
        waitForTcpPorts = true
        isRequiredBy(tasks.test)
        projectName = project.name
    }
}

task intDockerStart() {
    group = "Postgres and Mysql data access based Integration Test"
    description "Starts a local db container for postgres and mysql data access integration tests."
    dependsOn integrationTestDockerComposeDownForced
    dependsOn integrationTestDockerComposeUp
}

task intDockerDown(dependsOn: integrationTestDockerComposeDownForced) {
    group = "Postgres and Mysql data access based Integration Test"
    description "Stops a local db container for postgres and mysql data access integration tests."
}

test.doFirst {
    dockerCompose.exposeAsSystemProperties(test)
}

test.finalizedBy("intDockerDown")


test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task server(type: JavaExec) {
    main = 'com.netflix.conductor.demo.Main'
    classpath = sourceSets.test.runtimeClasspath
}
