buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:5.0.2'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.3.1.RELEASE'
    }
}

plugins {
//    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'application'
    id 'nebula.netflixoss' version '8.8.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

def javaProjects = subprojects.findAll {
    it.name != "ui"
}

configure(javaProjects) {
    compileJava.inputs.files(processResources)
}

apply from: "$rootDir/dependencies.gradle"

// change the ES version used by Spring Boot Dependency Management plugin
ext['elasticsearch.version'] = revElasticSearch6

allprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'project-report'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'com.netflix.conductor'

    configurations.all {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE")
        }
    }

    dependencies {
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('org.springframework.boot:spring-boot-starter-log4j2')
    }

    test {
        useJUnitPlatform()
    }
}

dependencies {
    // annotation processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${project.buildDir}/reports/jacoco/report.xml"
}

tasks.coveralls {
    group = "Coverage reports"
    description = "Uploads the aggregated coverage report to Coveralls"
}

task server {
    dependsOn ':conductor-server:bootRun'
}
