buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:7.0.0'
        // revElasticSearch7 in dependencies.gradle needs to be updated when spring is upgraded
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.3.12.RELEASE'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.+'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'application'
    id 'jacoco'
    id 'nebula.netflixoss' version '10.6.0'
    id 'org.sonarqube' version '3.3'
}

/*
 *  Copyright 2021 Netflix, Inc.
 *  <p>
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *  the License. You may obtain a copy of the License at
 *  <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  <p>
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 */

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

subprojects {
    tasks.withType(Javadoc).all { enabled = false }
}

apply from: "$rootDir/dependencies.gradle"

// change the ES version used by Spring Boot Dependency Management plugin
ext['elasticsearch.version'] = revElasticSearch6

allprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'project-report'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    group = 'com.netflix.conductor'
    def conductorVersion = System.getenv('CONDUCTOR_VERSION')
    if (conductorVersion) {
        println "Inferred version from env variable 'CONDUCTOR_VERSION': $conductorVersion"
        version =  conductorVersion
    }

    configurations.all {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    repositories {
        mavenCentral()

        // oss-candidate for -rc.* verions:
        maven {
            url "https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates"
        }

        /**
         * This repository locates artifacts that don't exist in maven central but we had to backup from jcenter
         * The exclusiveContent
         */
        exclusiveContent {
            forRepository {
                maven {
                    url "https://artifactory-oss.prod.netflix.net/artifactory/required-jcenter-modules-backup"
                }
            }
            filter {
                includeGroupByRegex "com\\.github\\.vmg.*"
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        repositories {
            maven {
                url "s3://orkes-artifacts-repo/releases"
                credentials(AwsCredentials) {
                    accessKey = System.env.AWS_ACCESS_KEY_ID ?: findProperty('aws_access_key_id')
                    secretKey = System.env.AWS_SECRET_ACCESS_KEY ?: findProperty('aws_secret_access_key')
                }
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.12.RELEASE")
        }
    }

    dependencies {
        implementation('org.apache.logging.log4j:log4j-core') {
            version {
                strictly '2.17.1'
            }
        }
        implementation('org.apache.logging.log4j:log4j-api') {
            version {
                strictly '2.17.1'
            }
        }
        implementation('org.apache.logging.log4j:log4j-slf4j-impl') {
            version {
                strictly '2.17.1'
            }
        }
        implementation('org.apache.logging.log4j:log4j-jul') {
            version {
                strictly '2.17.1'
            }
        }
        implementation('org.apache.logging.log4j:log4j-web') {
            version {
                strictly '2.17.1'
            }
        }
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('org.springframework.boot:spring-boot-starter-log4j2')
    }

    // processes additional configuration metadata json file as described here
    // https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-additional-metadata
    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
        testLogging {
            events = ["SKIPPED", "FAILED"]
            exceptionFormat = "full"
            displayGranularity = 1
            showStandardStreams = false
        }
    }


}

// all client and their related modules are published with Java 8 compatibility
["annotations", "common", "client", "client-spring", "grpc", "grpc-client"].each {
    project(":conductor-$it") {
        compileJava {
            options.release = 8
        }
    }
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

task server {
    dependsOn ':conductor-server:bootRun'
}

sonarqube {
    properties {
        property "sonar.projectKey", "com.netflix.conductor:conductor"
        property "sonar.organization", "netflix"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

configure(allprojects - project(':conductor-grpc')) {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            googleJavaFormat().aosp()
            removeUnusedImports()
            importOrder('java', 'javax', 'org', 'com.netflix', '', '\\#com.netflix', '\\#')
            licenseHeaderFile("$rootDir/licenseheader.txt")
        }
    }
}

["cassandra-persistence", "core", "redis-concurrency-limit", "test-harness"].each {
    configure(project(":conductor-$it")) {
        spotless {
            groovy {
                importOrder('java', 'javax', 'org', 'com.netflix', '', '\\#com.netflix', '\\#')
                licenseHeaderFile("$rootDir/licenseheader.txt")
            }
        }
    }
}
