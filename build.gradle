buildscript {
	repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:5.0.3'
        classpath 'org.apache.ant:ant:1.9.7'
    }
}
plugins {
    id 'nebula.netflixoss' version '9.1.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

apply plugin: 'project-report'
apply from: "$rootDir/versionsOfDependencies.gradle"

allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'

    repositories {
        mavenCentral()

        // oss-candidate for -rc.* verions:
        maven {
            url "https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates"
        }

        /**
         * This repository locates artifacts that don't exist in maven central but we had to backup from jcenter
         * The exclusiveContent
         */
        exclusiveContent {
            forRepository {
                maven {
                    url "https://artifactory-oss.prod.netflix.net/artifactory/required-jcenter-modules-backup"
                }
            }
            filter {
                includeGroupByRegex "com\\.github\\.vmg.*"
            }
        }
    }
}

def javaProjects = subprojects.findAll {
    it.name != "ui"
}

configure(javaProjects) {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'project-report'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testCompile "junit:junit:${revJUnit}"
        testCompile("org.mockito:mockito-core:${revMockito}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
    }

    group = "com.netflix.${githubProjectName}"

    tasks.withType(Test)  {
        maxParallelForks = 100
    }

    license {
		excludes(['**/*.txt', '**/*.conf', '**/*.properties', '**/*.json', '**/swagger-ui/*'])
	}

	task licenseFormatTests (type:nl.javadude.gradle.plugins.license.License) {
    	source = fileTree(dir: "src/test").include("**/*")
	}
	licenseFormat.dependsOn licenseFormatTests



    tasks.withType(Test) {
        task ->
            // set heap size for the test JVM(s)
            minHeapSize = "256m"
            maxHeapSize = "2g"
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}



/**********************************
 * Coverage Tasks
 **********************************/
task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    dependsOn subprojects*.test

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination new File("${buildDir}/reports/jacoco/html")
        csv.enabled = false
    }
    afterEvaluate {
        // Exclude generated files from top-level coverage report
        classDirectories.setFrom(files(
                classDirectories.files.collect {
                    fileTree(
                            dir: it,
                            // Exclude es modules from code coverage reports
                            exclude: 'com/netflix/conductor/elasticsearch/**'
                    )
                }
        ))
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${project.buildDir}/reports/jacoco/report.xml"
}

tasks.coveralls {
    group = "Coverage reports"
    description = "Uploads the aggregated coverage report to Coveralls"
    dependsOn codeCoverageReport
}

