buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${revDockerCompose}"
    }
}

apply plugin: 'docker-compose'

dependencies {
    compile project(':conductor-core')
    compile "com.google.inject:guice:${revGuice}"

    compile "commons-io:commons-io:${revCommonsIo}"
    compile "org.postgresql:postgresql:${revPostgres}"
    compile "com.zaxxer:HikariCP:${revHikariCP}"
    compile "org.flywaydb:flyway-core:${revFlywayCore}"

    testCompile project(':conductor-core').sourceSets.test.output
    testCompile "org.slf4j:slf4j-log4j12:${revSlf4jlog4j}"
}

dockerCompose{
    integrationTestDocker{
        useComposeFiles = ["./docker-compose.yml"]
        startedServices = ["postgresdb"]
        waitForTcpPorts = true
        isRequiredBy(tasks.test)
        projectName = project.name
    }
}

task intDockerStart() {
    group = "Postgres data access based Integration Test"
    description "Starts a local db container for postgres data access integration tests."
    dependsOn integrationTestDockerComposeDownForced
    dependsOn integrationTestDockerComposeUp
}

task intDockerDown(dependsOn: integrationTestDockerComposeDownForced) {
    group = "Postgres data access based Integration Test"
    description "Stops a local db container for postgres data access integration tests."
}

test.doFirst {
    dockerCompose.exposeAsSystemProperties(test)
}

test.finalizedBy("intDockerDown")

test {
    //the SQL unit tests must run within the same JVM to share the same embedded DB
    maxParallelForks = 1
}
