version: '2.3'

services:
  postgres:
    image: docker.io/library/postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: Keycloak@1234
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 30s
      timeout: 15s
      retries: 5
    networks:
      - internal
  keycloak:
    image: docker.io/jboss/keycloak:latest
    links:
      - postgres:postgres
    healthcheck:
      test: ["CMD", "curl", "-I", "-XGET", "http://localhost:8080/auth/realms/master"]
      interval: 60s
      timeout: 30s
      retries: 5
    volumes:
      - keycloak_realm_data:/tmp/migration
    command:
      - "-b 0.0.0.0"
      - "-Dkeycloak.migration.action=import"
      - "-Dkeycloak.migration.provider=dir"
      - "-Dkeycloak.migration.dir=/tmp/migration"
      - "-Dkeycloak.migration.strategy=OVERWRITE_EXISTING"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      mysql_dataBASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: Keycloak@1234
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Admin@1234
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    ports:
      - 9990:8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
  conductor-server:
    environment:
      - CONFIG_PROP=config-secure.properties
    image: conductor:server
    build:
      context: ../
      dockerfile: docker/server/Dockerfile
    networks:
      - internal
    ports:
      - 8080:8080
    healthcheck:
        test: ["CMD", "curl","-I" ,"-XGET", "http://localhost:8080/health"]
        interval: 60s
        timeout: 30s
        retries: 5
    links:
      - elasticsearch:es
      - dynomite:dyno1
      - keycloak:keycloak
    depends_on:
      elasticsearch:
        condition: service_healthy
      dynomite:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "1k"
        max-file: "3"

  conductor-ui:
    environment:
      - WF_SERVER=http://conductor-server:8080/api/
    image: conductor:ui
    build:
      context: ../
      dockerfile: docker/ui/Dockerfile
    networks:
      - internal
    ports:
      - 5000:5000
    links:
      - conductor-server

  dynomite:
    image: v1r3n/dynomite
    networks:
      - internal
    ports:
      - 8102:8102
    healthcheck:
      test: timeout 5 bash -c 'cat < /dev/null > /dev/tcp/localhost/8102'
      interval: 5s
      timeout: 5s
      retries: 12
    logging:
      driver: "json-file"
      options:
        max-size: "1k"
        max-file: "3"
  elasticsearch:
    image: docker.io/library/elasticsearch:6.8.15
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - transport.host=0.0.0.0
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - internal
    ports:
      - 9200:9200
      - 9300:9300
    healthcheck:
      test: timeout 5 bash -c 'cat < /dev/null > /dev/tcp/localhost/9300'
      interval: 5s
      timeout: 5s
      retries: 12
    logging:
      driver: "json-file"
      options:
        max-size: "1k"
        max-file: "3"

networks:
  internal:

volumes:
  keycloak_realm_data:
    driver: local
    driver_opts:
      type: none
      device: docker/server/config/keycloak/migration
      o: bind
  postgres_data:
    #driver: local
    #driver_opts:
    #  type: none
    #  device: persistence/postgres ## Path on host machine for persistence of keycloak realm data
    #  o: bind