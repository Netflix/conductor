--
-- Copyright 2021 Netflix, Inc.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

-- Queue Message

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'QUEUE_MESSAGE' AND INDEX_NAME = 'UNIQUE_QUEUE_NAME_MESSAGE_ID') > 0 
        THEN
            'ALTER TABLE QUEUE_MESSAGE DROP CONSTRAINT UNIQUE_QUEUE_NAME_MESSAGE_ID DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE QUEUE_MESSAGE DROP PRIMARY KEY;
ALTER TABLE QUEUE_MESSAGE ADD CONSTRAINT QUEUE_MESSAGE_PKEY PRIMARY KEY (queue_name, message_id);

-- Queue

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'QUEUE' AND INDEX_NAME = 'UNIQUE_QUEUE_NAME') > 0 
        THEN
            'ALTER TABLE QUEUE DROP CONSTRAINT UNIQUE_QUEUE_NAME DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE QUEUE DROP CONSTRAINT UNIQUE_QUEUE_NAME;
ALTER TABLE QUEUE DROP PRIMARY KEY;
ALTER TABLE QUEUE ADD CONSTRAINT QUEUE_PK PRIMARY KEY (queue_name);

-- Workflow To Task

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'WORKFLOW_TO_TASK' AND INDEX_NAME = 'UNIQUE_WORKFLOW_TO_TASK_ID') > 0 
        THEN
            'ALTER TABLE WORKFLOW_TO_TASK DROP CONSTRAINT UNIQUE_WORKFLOW_TO_TASK_ID DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE WORKFLOW_TO_TASK DROP CONSTRAINT WORKFLOW_TO_TASK_PKEY;
ALTER TABLE WORKFLOW_TO_TASK DROP PRIMARY KEY;
ALTER TABLE WORKFLOW_TO_TASK ADD CONSTRAINT WORKFLOW_TO_TASK_PKEY PRIMARY KEY (workflow_id, task_id);

-- Workflow Pending

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'WORKFLOW_PENDING' AND INDEX_NAME = 'UNIQUE_WORKFLOWTYPE_WORKFLOWID') > 0 
        THEN
            'ALTER TABLE WORKFLOW_PENDING DROP CONSTRAINT UNIQUE_WORKFLOWTYPE_WORKFLOWID DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE WORKFLOW_PENDING DROP CONSTRAINT WORKFLOW_PENDING_PKEY;
ALTER TABLE WORKFLOW_PENDING DROP PRIMARY KEY;
ALTER TABLE WORKFLOW_PENDING ADD CONSTRAINT WORKFLOW_PENDING_PKEY PRIMARY KEY (workflow_type, workflow_id);

-- Workflow Def To Workflow

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'WORKFLOW_DEF_TO_WORKFLOW' AND INDEX_NAME = 'UNIQUE_WORKFLOW_DEF_DATE_STR') > 0 
        THEN
            'ALTER TABLE WORKFLOW_DEF_TO_WORKFLOW DROP CONSTRAINT UNIQUE_WORKFLOW_DEF_DATE_STR DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE WORKFLOW_DEF_TO_WORKFLOW DROP CONSTRAINT WORKFLOW_DEF_TO_WORKFLOW_PKEY
ALTER TABLE WORKFLOW_DEF_TO_WORKFLOW DROP PRIMARY KEY;
ALTER TABLE WORKFLOW_DEF_TO_WORKFLOW ADD CONSTRAINT WORKFLOW_DEF_TO_WORKFLOW_PKEY PRIMARY KEY (workflow_def, date_str, workflow_id);

-- Workflow

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'WORKFLOW' AND INDEX_NAME = 'UNIQUE_WORKFLOW_ID') > 0 
        THEN
            'ALTER TABLE WORKFLOW DROP CONSTRAINT UNIQUE_WORKFLOW_ID DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE WORKFLOW DROP CONSTRAINT WORKFLOW_PKEY;
ALTER TABLE WORKFLOW DROP PRIMARY KEY;
ALTER TABLE WORKFLOW ADD CONSTRAINT WORKFLOW_PKEY PRIMARY KEY (workflow_id);

-- Task

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'TASK' AND INDEX_NAME = 'UNIQUE_TASK_ID') > 0 
        THEN
            'ALTER TABLE TASK DROP CONSTRAINT UNIQUE_TASK_ID DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE TASK DROP CONSTRAINT TASK_PKEY;
ALTER TABLE TASK DROP PRIMARY KEY;
ALTER TABLE TASK ADD CONSTRAINT TASK_PKEY PRIMARY KEY (task_id);

-- Task In Progress

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'TASK_IN_PROGRESS' AND INDEX_NAME = 'UNIQUE_TASK_DEF_TASK_ID1') > 0 
        THEN
            'ALTER TABLE TASK_IN_PROGRESS DROP CONSTRAINT UNIQUE_TASK_DEF_TASK_ID1 DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE TASK_IN_PROGRESS DROP CONSTRAINT TASK_IN_PROGRESS_PKEY;
ALTER TABLE TASK_IN_PROGRESS DROP PRIMARY KEY;
ALTER TABLE TASK_IN_PROGRESS ADD CONSTRAINT TASK_IN_PROGRESS_PKEY PRIMARY KEY (task_def_name, task_id);

-- Task Scheduled

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'TASK_SCHEDULED' AND INDEX_NAME = 'UNIQUE_WORKFLOW_ID_TASK_KEY') > 0 
        THEN
            'ALTER TABLE TASK_SCHEDULED DROP CONSTRAINT UNIQUE_WORKFLOW_ID_TASK_KEY DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE TASK_SCHEDULED DROP CONSTRAINT TASK_SCHEDULED_PKEY;
ALTER TABLE TASK_SCHEDULED DROP PRIMARY KEY;
ALTER TABLE TASK_SCHEDULED ADD CONSTRAINT TASK_SCHEDULED_PKEY PRIMARY KEY  (workflow_id, task_key);

-- Poll Data

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'POLL_DATA' AND INDEX_NAME = 'UNIQUE_POLL_DATA') > 0 
        THEN
            'ALTER TABLE POLL_DATA DROP CONSTRAINT UNIQUE_POLL_DATA DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE POLL_DATA DROP CONSTRAINT POLL_DATA_PKEY;
ALTER TABLE POLL_DATA DROP PRIMARY KEY;
ALTER TABLE POLL_DATA ADD CONSTRAINT POLL_DATA_PKEY PRIMARY KEY (queue_name, domain);

-- Event Execution

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'EVENT_EXECUTION' AND INDEX_NAME = 'UNIQUE_EVENT_EXECUTION') > 0 
        THEN
            'ALTER TABLE EVENT_EXECUTION DROP CONSTRAINT UNIQUE_EVENT_EXECUTION DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE EVENT_EXECUTION DROP CONSTRAINT EVENT_EXECUTION_PKEY;
ALTER TABLE EVENT_EXECUTION DROP PRIMARY KEY;
ALTER TABLE EVENT_EXECUTION ADD CONSTRAINT EVENT_EXECUTION_PKEY PRIMARY KEY (event_handler_name, event_name, execution_id);

-- Meta Workflow Def

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'META_WORKFLOW_DEF' AND INDEX_NAME = 'UNIQUE_NAME_VERSION') > 0 
        THEN
            'ALTER TABLE META_WORKFLOW_DEF DROP CONSTRAINT UNIQUE_NAME_VERSION DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE META_WORKFLOW_DEF DROP CONSTRAINT META_WORKFLOW_DEF_PKEY;
ALTER TABLE META_WORKFLOW_DEF DROP PRIMARY KEY;
ALTER TABLE META_WORKFLOW_DEF ADD CONSTRAINT META_WORKFLOW_DEF_PKEY PRIMARY KEY (name, version);

-- Meta Task Def

DECLARE
    sql_query  VARCHAR2 (150);
BEGIN
    SELECT CASE WHEN 
        (SELECT COUNT(INDEX_NAME) FROM all_indexes WHERE OWNER = USER AND TABLE_NAME = 'META_TASK_DEF' AND INDEX_NAME = 'UNIQUE_TASK_DEF_NAME') > 0 
        THEN
            'ALTER TABLE META_TASK_DEF DROP CONSTRAINT UNIQUE_TASK_DEF_NAME DROP INDEX'
        ELSE
            'SELECT 1 FROM DUAL'
        END
    INTO sql_query from DUAL;
    EXECUTE IMMEDIATE sql_query;
END;
/

-- ALTER TABLE META_TASK_DEF DROP CONSTRAINT META_TASK_DEF_PKEY;
ALTER TABLE META_TASK_DEF DROP PRIMARY KEY;
ALTER TABLE META_TASK_DEF ADD CONSTRAINT META_TASK_DEF_PKEY PRIMARY KEY (name);